#! /usr/bin/env python

import sys
import os
import re
import subprocess


PASSAGE_SPLIT_RE = re.compile('^:: ', flags=re.MULTILINE)
LINK_RE = re.compile('\[\[(.*?)\]\]')


def toHex16(n):
	return hex(n & 255)[2:].zfill(2)


class TweeLink(object):
	def __init__(self, start, length, display, target):
		self.start = start
		self.length = length
		self.display = display
		self.target = target

	def __repr__(self):
		return '<TweeLink({0}, {1}, {2}, {3})>'.format(self.start, self.length, self.display, self.target)


class TweePassage(object):
	def createDisplayText(self):
		offset = 0
		for link in self.links:
			link.start -= offset
			start = link.start
			end = start + link.length
			self.text = self.text[0:start] + link.display + self.text[end:]
			offset += link.length - len(link.display)

	def __repr__(self):
		return '<TweePassage({0})>'.format(self.name)


class TweeStory(object):
	
	LABEL_PREFIX = 'Passage_'
	INIT_LABEL = LABEL_PREFIX + 'INIT'

	def __init__(self, text):
		self.text = text.replace('\r', '')
		self.initPassages()
		self.addLabels()
		self.extractLinks()
		for passage in self.passages:
			passage.createDisplayText()
		self.addRestartLinks()

	def passageByName(self, name):
		for passage in self.passages:
			if passage.name == name:
				return passage

	def initPassages(self):
		self.passages = []
		for section in PASSAGE_SPLIT_RE.split(self.text):
			if not section:
				continue
			passage = TweePassage()
			header, body = section.split('\n', 1)
			passage.name = header.rsplit(' [', 1)[0].strip()
			while body[-1] == '\n':
				body = body[:-1]
			passage.text = body
			self.passages.append(passage)

	def addLabels(self):
		labels = [TweeStory.INIT_LABEL]
		for passage in self.passages:
			label = re.sub(' ', '_', passage.name)
			label = re.sub('\W', '', label)
			label = TweeStory.LABEL_PREFIX + label
			while label in labels:
				label += '_'
			passage.label = label
			labels.append(label)

	def extractLinks(self):
		for passage in self.passages:
			passage.links = []
			linkIterator = LINK_RE.finditer(passage.text)
			for linkMatch in linkIterator:
				contents = linkMatch.groups()[0]
				start = linkMatch.start()
				length = linkMatch.end() - linkMatch.start()
				display  = contents.split('|')[0] # TODO: improve LINK_RE so logic to get display and targetString is minimized
				targetString = contents.split('|')[1] if '|' in contents else contents
				target = self.passageByName(targetString)
				passage.links.append(TweeLink(start, length, display, target))

	def addRestartLinks(self):
		for passage in self.passages:
			if len(passage.links) == 0:
				passage.text += '\n\n> Restart'
				passage.links.append(TweeLink(len(passage.text) - 9, 9, '> Restart', self.passages[0]))
		

class TweeZ80Passage(object):
	def __init__(self, passage):
		self.passage = passage

	def addWord(self, word):
		if len(self.column) == 0:
			if len(word) > 20:
				while len(word):
					self.column = word[:20]
					word = word[20:]
					self.pointerList += range(self.pointer, self.pointer + len(self.column))
					self.pointer += len(self.column)
					if len(self.column) == 20:
						self.columns.append(self.column)
						self.column = ''
			else:
				self.column += word
				self.pointerList += range(self.pointer, self.pointer + len(word))
				self.pointer += len(word)
		elif len(word) + len(self.column) + 1 <= 20:
			self.column += ' ' + word
			self.pointerList += range(self.pointer, self.pointer + len(word) + 1)
			self.pointer += len(word) + 1
		# todo: add support for words > 20 chars
		else:
			self.pointer += 1 # WARNING THIS CAN CAUSE ERRORS BECAUSE IF A LINK STARTS ON A SPACE YOU"RE SCREWED
			self.pointerList += [-1] * (20 - len(self.column))
			self.column += ' ' * (20 - len(self.column))
			self.columns.append(self.column)
			self.column = ''
			self.addWord(word)

	def generateColumns(self):
		self.columns = []
		self.pointer = 0
		self.pointerList = []
		self.column = ''
		# add words to columns
		for line in self.passage.text.split('\n'):
			words = line.split(' ')
			for word in words:
				self.addWord(word)
			self.pointerList += [-1] * (20 - len(self.column))
			self.column += ' ' * (20 - len(self.column))
			self.pointer += 1 # \n
			self.columns.append(self.column)
			self.column = ''
		# update links
		for link in self.passage.links:
			start = self.pointerList.index(link.start)
			length = self.pointerList.index(link.start + len(link.display) - 1) - start + 1
			link.start = start
			link.length = length
			link.line = int(link.start / 20)
			link.column = link.start % 20
		# escape string characters

	def generateAssembly(self):
		lines = [self.passage.label + '::']
		lines.append('\tDB {0}'.format(len(self.passage.links)))
		for link in self.passage.links:
			ls1 = toHex16(link.line >> 8)
			ls2 = toHex16(link.line)
			col = toHex16(link.column)
			ln = toHex16(len(link.display))
			lines.append('\tDB ${0},${1},${2},${3}'.format(ls1, ls2, col, ln))
			lines.append('\tDW {0}'.format(link.target.label))
		lines.append('')
		for column in self.columns:
			column = repr(column)[1:-1].replace('"', '\\"')
			lines.append('\tDB "{0}"'.format(column))
		lines.append('\tDB $1a') # end of passage
		self.assembly = '\n'.join(lines)


class TweeZ80Converter(object):

	def buildStoryData(self, story):
		chunks = ['SECTION "Passages",HOME', TweeStory.INIT_LABEL + '::\n\tDW ' + story.passages[0].label]
		for passage in story.passages:
			z80Passage = TweeZ80Passage(passage)
			z80Passage.generateColumns()
			z80Passage.generateAssembly()
			chunks.append(z80Passage.assembly)
		return '\n\n'.join(chunks)

	def buildEngine(self):
		engine = []
		for src in ['hardware', 'keypad', 'ascii', 'engine']:
			path = os.path.join(os.path.dirname(sys.argv[0]), 'include', src + '.inc')
			with open(path, 'r') as f:
				engine.append(f.read())
		return '\n\n'.join(engine)

	def convert(self, story):
		storyData = self.buildStoryData(story)
		engine = self.buildEngine()
		return '\n\n'.join([storyData, engine])


def buildAssembly(path):
	dst = os.path.splitext(path)[0] + '.z80'
	with open(path, 'r') as f:
		text = f.read()
	story = TweeStory(text)
	assembly = TweeZ80Converter().convert(story)
	with open(dst, 'w') as f:
		f.write(assembly)
	return dst


def buildBinary(path):
	objectPath = os.path.splitext(path)[0] + '.obj'
	outputPath = os.path.splitext(path)[0] + '.gb'
	try:
		subprocess.call(['rgbasm', '-o', objectPath, path])
		subprocess.call(['rgblink', '-o', outputPath, objectPath])
		subprocess.call(['rgbfix', '-p', '0', '-v', outputPath])
	except Exception as e:
		for p in [objectPath, outputPath]:
			if os.path.exists(p):
				os.remove(p)
		raise e
	else:
		for p in [path, objectPath]:
			if os.path.exists(p):
				os.remove(p)


def main():
	assert len(sys.argv) == 2, 'Must specify exactly one path for twine source'
	assemblyPath = buildAssembly(sys.argv[1])
	buildBinary(assemblyPath)


if __name__ == '__main__':
	main()